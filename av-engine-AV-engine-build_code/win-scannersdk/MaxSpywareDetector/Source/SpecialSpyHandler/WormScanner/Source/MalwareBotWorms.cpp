/*=============================================================================
   FILE				: CMalwareBotWorms.Cpp
   ABSTRACT			: Implementation of Special Spyware CMalwareBotWorms Class
   DOCUMENTS		: SpeacialSpyhandler_DesignDoc.doc
   AUTHOR			: Ritesh
   COMPANY			: Aura 
   COPYRIGHT NOTICE	:
					(C) Aura
      				Created as an unpublished copyright work.  All rights reserved.
     				This document and the information it contains is confidential and
      				proprietary to Aura.  Hence, it may not be 
      				used, copied, reproduced, transmitted, or stored in any form or by any 
      				means, electronic, recording, photocopying, mechanical or otherwise, 
      				without the prior written permission of Aura
   CREATION DATE	: 01/03/2008
   NOTES			:
   VERSION HISTORY	: 
						version: 2.5.0.29
						resource: Ritesh
						Description: added fix for FakeAntiSpyware.MalwareBot

															
=============================================================================*/

#include "pch.h"
#include "Malwarebotworms.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/*-------------------------------------------------------------------------------------
	Function		: ScanSplSpy
	In Parameters	: bool ,CFileSignatureDb
	Out Parameters	: bool
	Purpose			: Checks and remove CMalwareBotWorms
    Author			: Ritesh
	Description		: Finds and Displays CMalwareBotWorms Key Entry
--------------------------------------------------------------------------------------*/
bool CMalwareBotWorms::ScanSplSpy ( bool bToDelete, CFileSignatureDb *pFileSigMan)
{ 
	try
	{
		CStringArray csProductKeys ;
		CStringArray csArrLoc;

		csArrLoc.Add ( CSystemInfo::m_strProgramFilesDir );
		if ( m_bScanOtherLocations )
		{
			csArrLoc.Add ( CSystemInfo::m_strProgramFilesDirX64 ); 
		}
		
		for ( int iLocCnt = 0 ; iLocCnt < csArrLoc.GetCount() ; iLocCnt++ )
		{
			// create malwarebot path 
			CString	csFilePath	=	csArrLoc.GetAt ( iLocCnt ) + _T("\\MalwareBot") ;

			// check and return false if doesn't exists
			if ( _taccess ( csFilePath , 00 ) )
				continue ;

			CStringArray csArrPrdPath;

			csArrPrdPath.Add ( PRODUCTS_PATH );
			if ( m_bScanOtherLocations )
				csArrPrdPath.Add ( PRODUCTS_PATH_X64 ) ;

			for ( int iProdcnt = 0 ; iProdcnt < csArrPrdPath.GetCount() ; iProdcnt++ )
			{

				if ( ! m_objReg.EnumSubKeys ( csArrPrdPath.GetAt ( iProdcnt ) , csProductKeys , HKEY_LOCAL_MACHINE ) )
					continue ;

				for ( int i = 0 ; i < csProductKeys.GetCount() ; i++ )
				{
					CString csInstallLocation , csDisplayName , csFullKey ;
					csInstallLocation = csDisplayName = csFullKey = BLANKSTRING ;

					csFullKey = csArrPrdPath.GetAt ( iProdcnt ) + BACK_SLASH + csProductKeys.GetAt(i) + _T("\\InstallProperties") ;
					m_objReg . Get ( csFullKey , _T("InstallLocation") , csInstallLocation ,HKEY_LOCAL_MACHINE ) ;
					m_objReg . Get ( csFullKey , _T("DisplayName") , csDisplayName ,HKEY_LOCAL_MACHINE ) ;

					if ( StrStrI ( csInstallLocation , _T("\\MalwareBot") ) && StrStrI ( csDisplayName , _T("MalwareBot") ) )
					{
						m_bSplSpyFound = true ;
						EnumKeynSubKey ( CString(HKLM) + CString(BACK_SLASH) + csArrPrdPath.GetAt(iProdcnt) 
							+ CString(BACK_SLASH) + csProductKeys.GetAt(i) , m_ulSpyName ) ;
					}
				}
			}
		}

		m_bSplSpyFound = bToDelete ? false : m_bSplSpyFound ;
		//if ( m_bSplSpyFound ) 
		//	AddLogEntry ( _T("Spyware Found : %s") , m_ulSpyName ) ;

		return m_bSplSpyFound ;
	}

	catch(...)
	{
		CString csErr;
		csErr.Format(_T("Exception caught in CMalwareBotWorms::ScanSplSpy, Error : %d") ,GetLastError());
		AddLogEntry(csErr,0,0);
	}

	return ( false ) ;
}

