/*=============================================================================
   FILE				: CMalwarePrtectorWorms.Cpp
   ABSTRACT			: Implementation of Special Spyware CMalwareProtector Class
   DOCUMENTS		: SpeacialSpyhandler_DesignDoc.doc
   AUTHOR			: Shweta
   COMPANY			: Aura 
   COPYRIGHT NOTICE	:
					(C) Aura
      				Created as an unpublished copyright work.  All rights reserved.
     				This document and the information it contains is confidential and
      				proprietary to Aura.  Hence, it may not be 
      				used, copied, reproduced, transmitted, or stored in any form or by any 
      				means, electronic, recording, photocopying, mechanical or otherwise, 
      				without the prior written permission of Aura
   CREATION DATE	: 18/06/2008
   NOTES			:
   VERSION HISTORY	: 

					version: 2.5.0.36
					Resource : Anand
					Description: created the function ScanForInfection

					version: 2.5.0.50
					Resource : Shweta
					Description: Made changes to generically handle the random folder.
					
					version: 2.5.0.53
					Resource : Shweta
					Description: Made changes to generically handle the random folder of eantiviruspro.

					version		: 2.5.0.55
					Date		: 29 Sep 2008
					Resource	: Nitin Shekokar
					Description	: 1. Add code to match infected bmp's MD5 value Array with registry value. 
								  2. Move codeScanRandomEntries from MultipleSpywareWorm to MalwareProtector.
								  3. Move ScanRandomRunDll from MultipleSpywareWorm to MalwareProtector.

=============================================================================*/

#include "pch.h"
#include "MalwareProtector.h"
#include "ExecuteProcess.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/*-------------------------------------------------------------------------------------
	Function		: ScanSplSpy
	In Parameters	: bool ,CFileSignatureDb
	Out Parameters	: bool
	Purpose			: Checks and remove CMalwareProtector Folder
    Author			: Ritesh
	Description		: Finds and Displays CMalwareProtector random Folders and Keys 
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector::ScanSplSpy ( bool bToDelete, CFileSignatureDb *pFileSigMan)
{ 
	try
	{
		if ( !bToDelete )
		{
			ScanForInfection ( m_ulSpyName , _T ( "malwareprotector" ) , false) ;
			ScanRandomEntries( m_ulSpyName );
			ScanRandomRunDll( m_ulSpyName );
		}

		if ( CheckFileMD5 ( pFileSigMan, bToDelete) )
			m_bSplSpyFound = true ;

		m_bSplSpyFound = bToDelete ? false : m_bSplSpyFound ;
		//if ( m_bSplSpyFound ) 
		//	AddLogEntry ( _T("Spyware Found : %s") , m_ulSpyName ) ;

		return ( m_bSplSpyFound ) ;
	}

	catch(...)
	{
		CString csErr;
		csErr.Format(_T("Exception caught in CMalwareProtector::ScanSplSpy, Error : %d") ,GetLastError());
		AddLogEntry(csErr,0,0);
	}

	return ( false ) ;
}

/*-------------------------------------------------------------------------------------
	Function		: ScanForInfection
	In Parameters	: const CString& , const CString& 
	Out Parameters	: bool
	Purpose			: Checks and remove spyware
    Author			: Anand
	Description		: Finds and Displays spyware infection of type fake antivirus random entries
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector :: ScanForInfection ( ULONG ulSpywareName, const CString& csSearchString , bool bToCheck)
{
	CStringArray csArrSoftwareKeys ;
	CString csData;
	bool bSpywareFound = false ;
	CString csAppPath;
	TCHAR szPath [ MAX_PATH ] = { 0 } ;
	int icnt = 0;
	CStringArray csRegLocations;

	csRegLocations . Add ( SOFTWARE_SUB_KEY ) ;
	if ( m_bScanOtherLocations )
		csRegLocations . Add ( WOW6432NODE_REG_PATH ) ;

	for ( int iLoc = 0 ; iLoc < csRegLocations.GetCount(); iLoc ++ )
	{
		m_objReg.EnumSubKeys ( csRegLocations.GetAt(iLoc) , csArrSoftwareKeys , HKEY_LOCAL_MACHINE ) ;

		for ( int i = 0 ;i < csArrSoftwareKeys.GetCount() ;i++)
		{
			if ( !m_objReg.Get(csRegLocations.GetAt(iLoc) + BACK_SLASH + csArrSoftwareKeys.GetAt(i) , _T("domain"),csData , HKEY_LOCAL_MACHINE ))
				continue;

			csData.MakeLower();
			if ( ulSpywareName == 484 )
			//if ( csSpywareName == _T("Fake Anti Spyware.AntiVirusXP2008") ) //484
				icnt = 1;
			//2.5.0.50
			if ( ulSpywareName == 8418 )
			//if ( csSpywareName == _T("Fake Anti Spyware.XP Protector 2009") ) //8418
				icnt = 2 ;
			//2.5.0.53
			if ( ulSpywareName == 8573 )
			//if ( csSpywareName == _T("Fake Anti Spyware.eAntivirusPro") ) //8573
				icnt = 3 ;
			if ( ulSpywareName == 8582 )
			//if ( csSpywareName == _T("Fake Anti Spyware.AntiMalware 2009") ) //8582
				icnt = 4 ;

			if (( csData.Find ( csSearchString ) == -1) && ( false == CheckFolderPattern ( csRegLocations.GetAt(iLoc) + BACK_SLASH + csArrSoftwareKeys.GetAt(i) , csData , bToCheck , icnt ) ) )
				continue;
			
			if ( !m_objReg.Get(csRegLocations.GetAt(iLoc) + BACK_SLASH + csArrSoftwareKeys.GetAt(i) , _T("InstallDir"),csData , HKEY_LOCAL_MACHINE ))
				continue;

			if ( _taccess_s ( csData , 0 ) )
				continue ;

			bSpywareFound = true ;
			RemoveFolders ( csData , ulSpywareName , false ) ;
			EnumKeynSubKey ( CString(HKLM) + CString(BACK_SLASH) + csRegLocations.GetAt(iLoc) 
				+ CString(BACK_SLASH) + csArrSoftwareKeys.GetAt(i) ,ulSpywareName );

			// get user application data path
			SHGetFolderPath ( 0, CSIDL_APPDATA ,0 , 0, szPath);
			
			csAppPath = szPath ;
			csAppPath = csAppPath + BACK_SLASH + csArrSoftwareKeys.GetAt(i) ;
			if ( _taccess_s ( csAppPath , 0 ) == 0 )
				RemoveFolders ( csAppPath , ulSpywareName , false ) ;

			if ( m_objReg . KeyExists ( CString(UNINSTALL_PATH) + CString(BACK_SLASH) 
				+ csArrSoftwareKeys.GetAt(i) , HKEY_LOCAL_MACHINE ))
				EnumKeynSubKey ( CString(HKLM) + CString(BACK_SLASH) + CString(UNINSTALL_PATH) 
				+ CString(BACK_SLASH) + csArrSoftwareKeys.GetAt(i) , ulSpywareName ) ;

			if ( bToCheck )
				CheckForOtherEntries (csData , ulSpywareName);
		}
	}

	return ( bSpywareFound ) ;
}
/*-------------------------------------------------------------------------------------
	Function		: CheckFolderPattern
	In Parameters	: const CString& , const CString& , bool
	Out Parameters	: bool
	Purpose			: Checks and remove spyware
    Author			: Shweta Mulay
	Description		: Finds and Displays spyware infection of type fake antivirus random entries
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector::CheckFolderPattern ( const CString & csRegPath , const CString & csFolderName , bool bToCheck , int istatus)
{

	if ( !bToCheck )
		return ( false );

	CStringArray csArrVal;
	CString csData ,csFileName;
	int ifoundcnt = 0;

	csArrVal.Add (_T("RegistrationUrl"));
	csArrVal.Add (_T("RegistrationDiscUrl"));
	csArrVal.Add (_T("SoftID"));
	csArrVal.Add (_T("domain"));
	csArrVal.Add (_T("BuyUrl")); //2.5.0.50
	csArrVal.Add (_T("BuyDiscUrl"));//2.5.0.50
	

	for ( int i = 0 ; i < csArrVal.GetCount() ; i++)
	{
		if ( m_objReg.ValueExists ( csRegPath , csArrVal.GetAt(i) ,HKEY_LOCAL_MACHINE ) )
		{
			ifoundcnt++;
		}
	}
	if ( ifoundcnt < 4 )
		return false;

	if ( !m_objReg.Get ( csRegPath , _T("InstallDir"),csData , HKEY_LOCAL_MACHINE ))
		return false;

	if ( _taccess_s ( csData , 0 ) )
		return ( false );

	csFileName = csData ;
	csFileName = csFileName + BACK_SLASH + csData . Right ( csData . GetLength() - csData . ReverseFind ( _T('\\') ) - 1 ) + _T(".exe");

	if ( _taccess_s ( csFileName , 0 ) )
		return ( false ) ;

	if ( bToCheck )
	{
		CString csLicenceFileName;
		CArray<CStringA,CStringA> csArr ; 

		if ( istatus == 1 )
			csArr.Add ( "Antivirus XP 2008" ) ;
		else
		{
			if ( istatus == 2) 
				csArr.Add ( "XP Protector 2009" );//2.5.0.50
			else if ( istatus == 3 )
				csArr.Add ( "eAntivirusPro" ); // 2.5.0.53
			else if ( istatus == 4 )
				csArr.Add ( "antimalware2009" );
		}
		
		csLicenceFileName = csData + BACK_SLASH + _T("license.txt") ;

		if ( _taccess_s ( csLicenceFileName , 0 ) )
			return ( false ) ;

		if ( SearchStringsInFile ( csLicenceFileName , csArr ) )
		{
			return ( true ) ;
		}
	}
	return ( false ) ;
}
/*-------------------------------------------------------------------------------------
	Function		: CheckForOtherEntries
	In Parameters	: const CString& 
	Out Parameters	: bool
	Purpose			: Checks and remove spyware
    Author			: Shweta Mulay
	Description		: Finds and Displays spyware registry value & Data and Random file in system32
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector::CheckForOtherEntries ( const CString& csFolder , UINT ulSpywareName)
{
	try
	{
		//Enum Run for Data and Value	
		CString csDataToCheck ,csVal , csData;
		
		csDataToCheck = csFolder + BACK_SLASH + csFolder.Right(csFolder.GetLength() - csFolder.ReverseFind('\\') -1 ) + _T( ".exe" ) ;
		csDataToCheck.MakeLower();
		
        
        vector<REG_VALUE_DATA> vecRegValues;
	    m_objReg.EnumValues(RUN_REG_PATH, vecRegValues, HKEY_LOCAL_MACHINE);
        for ( size_t i = 0 ; i < vecRegValues.size() ; i++ )
		{
            csVal  =vecRegValues[i].strValue;
            csData.Format(_T("%s") , (TCHAR*)vecRegValues[i].bData);
			if (  csData .MakeLower() == csDataToCheck )
			{				
                SendScanStatusToUI ( Special_RegVal , ulSpywareName, HKEY_LOCAL_MACHINE ,  CString(RUN_REG_PATH) 
                    , vecRegValues[i].strValue,vecRegValues[i].Type_Of_Data,vecRegValues[i].bData,vecRegValues[i].iSizeOfData);
			}
		}        
		//m_objFinder . Find ( Windows\\system32\\*j0ea8a.* ) ;
		CFileFind objFile;
		BOOL bFindFlag;
		CString csFolderchar ;

		csFolderchar = csFolder.Right(6);
		bFindFlag = objFile.FindFile ( m_objSysInfo.m_strSysDir + _T( "\\*") + csFolderchar + _T("*.exe") ) ; 

		while ( bFindFlag )
		{
			bFindFlag = objFile.FindNextFile();
            SendScanStatusToUI ( Special_File, ulSpywareName , objFile.GetFilePath()  );
		}
		objFile.Close() ;
	}
	catch(...)
	{
		CString csErr;
		csErr.Format(_T("Exception caught in CMalwareProtector::CheckForOtherEntries, Error : %d") ,GetLastError());
		AddLogEntry(csErr,0,0);
	}
	return true;
}

/*-------------------------------------------------------------------------------------
	Function		: ScanRandomEntries
	In Parameters	: bool
	Out Parameters	: 
	Purpose			: Checks and removes Multiple Spyware
	Author			: Anand Srivastava
	Description		: checks and removes random screen saver and exes from windir and sysdir
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector:: ScanRandomEntries(ULONG ulSpywareName)
{
	CRegistry	 m_objReg;
	CString csValue1 = _T ( "Wallpaper" ) ;
	CString csValue2 = _T ( "OriginalWallpaper" ) ;
	CString csValue3 = _T ( "ConvertedWallpaper" ) ;
	CString csValue4 = _T ( "SCRNSAVE.EXE" ) ;
	CString csData1 ;
	CString csData2 ;
	CString csData3 ;
	CString csData4 ;
	CString csSid ;
	CExecuteProcess objExecuteproc;

	csSid  = objExecuteproc.GetCurrentUserSid() ;
    DWORD dwDataType1 = 0;
	m_objReg . Get ( csSid + BACK_SLASH + _T ( "Control Panel\\Desktop" ) , csValue1 , csData1 , HKEY_USERS , &dwDataType1) ;
	if ( 0 == csData1 . GetLength() )
		return ( false ) ;

	csData1 . MakeLower() ;
    DWORD dwDataType2 = 0;
	m_objReg . Get ( csSid + BACK_SLASH + _T ( "Control Panel\\Desktop" ) , csValue2 , csData2 , HKEY_USERS , &dwDataType2) ;
	if ( 0 == csData2 . GetLength() )
		return ( false ) ;

	csData2 . MakeLower() ;
	if ( csData1 != csData2 )
		return ( false ) ;
    DWORD dwDataType3 = 0;
	m_objReg . Get ( csSid + BACK_SLASH +_T ( "Control Panel\\Desktop" ) , csValue3 , csData3 , HKEY_USERS , &dwDataType3) ;
	if ( 0 == csData3 . GetLength() )
		return ( false ) ;

	csData3 . MakeLower() ;
	if ( csData1 != csData3 )
		return ( false ) ;

	m_objReg . Get ( csSid + BACK_SLASH + _T ( "Control Panel\\Desktop" ) , csValue4 , csData4 , HKEY_USERS ) ;
	if ( 0 == csData4 . GetLength() )
		return ( false ) ;

	TCHAR szOnlyFilename1 [ MAX_PATH ] = { 0 } ;
	TCHAR szOnlyFilename2 [ MAX_PATH ] = { 0 } ;

	csData1 . MakeLower();
	csData4 . MakeLower();

	_tsplitpath_s ( csData1 , 0 , 0 , 0 , 0 , szOnlyFilename1 , _countof ( szOnlyFilename1 ) , 0 , 0 ) ;
	_tsplitpath_s ( csData4 , 0 , 0 , 0 , 0 , szOnlyFilename2 , _countof ( szOnlyFilename2 ) , 0 , 0 ) ;

	_tcsrev ( szOnlyFilename1 ) ; _tcsrev ( szOnlyFilename2 ) ;
	if ( _tcsncmp ( szOnlyFilename1 , szOnlyFilename2 , 6 ) )
		return ( false ) ;

	szOnlyFilename1 [ 6 ] = 0 ;
	_tcsrev ( szOnlyFilename1 ) ;
	
    SendScanStatusToUI ( Special_RegVal ,  ulSpywareName , HKEY_USERS  , csSid 
        + CString(_T ( "\\Control Panel\\Desktop" )) ,  csValue1 ,dwDataType1, (LPBYTE)(LPCTSTR)csData1,csData1.GetLength()+sizeof(TCHAR)) ;
    SendScanStatusToUI ( Special_RegVal ,  ulSpywareName , HKEY_USERS  , csSid 
		+ CString(_T ( "\\Control Panel\\Desktop" )) ,  csValue2 ,dwDataType2, (LPBYTE)(LPCTSTR)csData2,csData2.GetLength()+sizeof(TCHAR)) ;
    SendScanStatusToUI ( Special_RegVal ,  ulSpywareName , HKEY_USERS  , csSid 
		+ CString(_T ( "\\Control Panel\\Desktop" )) ,  csValue3 ,dwDataType3, (LPBYTE)(LPCTSTR)csData3,csData2.GetLength()+sizeof(TCHAR)) ;

	//Commented by anand sir and add new line(Sandip)
	//m_objReg . Set ( csSid + BACK_SLASH + _T ( "Control Panel\\Desktop" ) , csValue4 , CString ( _T ( "LOGON.SCR" ) ) , HKEY_USERS ) ;
    //TODO: RegFix
	/*SendMessageToUI ( ulSpywareName , CString(HKU) + CString(BACK_SLASH) + csSid 
		+ CString(_T ( "\\Control Panel\\Desktop" )) + CString(REG_SEPERATOR) + csValue3 
		+ CString(REG_SEPERATOR) + csData3 + CString(_T ( " | " )) + CString(_T ( "LOGON.SCR" )) , Special_RegDataFix_Scanner ) ;*/

	CFileFind objFinder ;
	BOOL bFound = FALSE ;
	bool bCloseObject = false ;

	bFound = objFinder . FindFile ( CSystemInfo::m_strSysDir + _T ( "\\*" ) + szOnlyFilename1 + _T ( ".*" ) ) ;
	while ( bFound )
	{
		bCloseObject = true ;
		bFound = objFinder . FindNextFile() ;
		if ( objFinder . IsDirectory() || objFinder . IsDots() )
			continue ;

		SendScanStatusToUI ( Special_File, ulSpywareName , objFinder . GetFilePath()  ) ;
	}

	if ( bCloseObject )
		objFinder . Close() ;

	bCloseObject = false ;
	bFound = objFinder . FindFile ( CSystemInfo::m_strWinDir + _T ( "\\*" ) + szOnlyFilename1 + _T ( ".*" ) ) ;
	while ( bFound )
	{
		bCloseObject = true ;
		bFound = objFinder . FindNextFile() ;
		if ( objFinder . IsDirectory() || objFinder . IsDots() )
			continue ;

		SendScanStatusToUI ( Special_File, ulSpywareName , objFinder . GetFilePath()  ) ;
	}

	if ( bCloseObject )
		objFinder . Close() ;
	
	return ( true ) ;
}
/*-------------------------------------------------------------------------------------
	Function		: ScanRandomRunDll
	In Parameters	: 
	Out Parameters	: 
	Purpose			: removes random dll from Run
	Author			: Anand Srivastava
	Description		: removes random dll from Run
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector:: ScanRandomRunDll(ULONG ulSpywareName)
{
	const TCHAR * start = 0 ;
	const TCHAR * end = 0 ;
	TCHAR szFilename [ MAX_PATH ] = { 0 } ;
	CFileVersionInfo oFileVersionInfo ;
	CArray<CStringA,CStringA> csArrStrings ;

	csArrStrings . Add ( "abcdefghijklmnopqrstuvwxyz" ) ;
	csArrStrings . Add ( "PADDINGXXPADDING" ) ;
	csArrStrings . Add ( "ieframe.dll" ) ;

    vector<REG_VALUE_DATA> vecRegValues;
	m_objReg.EnumValues(RUN_REG_PATH, vecRegValues, HKEY_LOCAL_MACHINE);    
    for ( size_t i = 0 ; i < vecRegValues.size() ; i++ )
	{
        CString csdata; 
        csdata.Format(_T("%s") , (TCHAR*)vecRegValues[i].bData);

		if ( -1 == csdata. Find ( _T ( "rundll32.exe" ) ) )
			continue ;

		start = end = NULL ;
		memset ( szFilename , 0 , sizeof ( szFilename ) ) ;

		start = _tcschr ( csdata , _T(':') ) ;
		if ( NULL == start )
			continue ;
		start++ ;
		
		start = _tcschr ( start , _T(':') ) ;
		if ( NULL == start )
			continue ;
		
		start-- ;

		end = _tcsstr ( start , _T(".dll") ) ;
		if ( NULL == end )
			continue ;

		end += 4 ;
		_tcsncpy_s ( szFilename , _countof ( szFilename ) , start , end - start ) ;
	
		// continue if VERSION TAB PRESENT
		if ( oFileVersionInfo . DoTheVersionJob ( szFilename , false ) )
			continue ;

		if ( SearchStringsInFile ( szFilename , csArrStrings ) )
		{
			SendScanStatusToUI ( Special_File , ulSpywareName, szFilename  ) ;			
			SendScanStatusToUI (Special_RegVal , ulSpywareName, HKEY_LOCAL_MACHINE,  CString(RUN_REG_PATH) 
                ,vecRegValues[i].strValue,vecRegValues[i].Type_Of_Data,vecRegValues[i].bData,vecRegValues[i].iSizeOfData ) ;
		}
	}    
	return(false);
}
/*-------------------------------------------------------------------------------------
	Function		: CheckFileMD5
	In Parameters	: CFileSignatureDb, bool
	Out Parameters	: Bool
	Purpose			: Remove infected bmp of desktop wallpaper
	Author			: Nitin Shekokar
	Description		: Match infected bmp's MD5 value Array with registry value. 
--------------------------------------------------------------------------------------*/
bool CMalwarePrtector::CheckFileMD5(CFileSignatureDb *pFileSigMan, bool bToDelete)
{
	CString csRegKey = _T("Control Panel\\Desktop");
	CStringArray csArrRegValue;
	csArrRegValue.Add(_T("OriginalWallpaper"));
	csArrRegValue.Add(_T("Wallpaper"));
	CStringArray csArrBlackMD5;
	CString csBlackFilePath = _T("");
	CString csBlackFilename = _T("");
	csArrBlackMD5.Add(_T("D424617102D3FA9E57DB4C07D2164702"));
	csArrBlackMD5.Add(_T("7A534E60E0917B1EABB052379F7DE01D"));
	CExecuteProcess objExecProc;
	CString csSid;
	bool bFound = false ;
	
	csSid = objExecProc.GetCurrentUserSid() ;
	
	bFound = CheckForFileMD5 ( HKEY_USERS , csSid + BACK_SLASH + csRegKey , csArrRegValue , csArrBlackMD5 ,
							   csBlackFilePath , csBlackFilename , false , false , pFileSigMan , bToDelete ) ;
	return ( bFound ) ;
}