#pragma once
#include <fltKernel.h>
#include <wdm.h>
#include <dontuse.h>
#include <suppress.h>
#include <ntstrsafe.h>

#define MAX_PATH					1024
#define MAX_BUFFER_SIZE				512
#define INVALID_HANDLE_VALUE		(HANDLE)0xffffffff


UNICODE_STRING PROTECTORDEVICENAME = RTL_CONSTANT_STRING(L"\\Device\\AUFSPROCDRV");
UNICODE_STRING PROTECTORDEVICELINK = RTL_CONSTANT_STRING(L"\\DosDevices\\AUFSPROCDRV");
const static UNICODE_STRING SYSTEM_PROCESS_NAME = RTL_CONSTANT_STRING(L"System");

//
#define MAX_PATH 1024
#define BLOCKTROJAN_POOL_POOL_TAG 'BTP'
#define MAXPROTECTOR_POOL_POOL_TAG	'MAX'

//Required Structure
typedef NTSTATUS(*QUERY_INFO_PROCESS)(
	__in HANDLE ProcessHandle,
	__in PROCESSINFOCLASS ProcessInformationClass,
	__out_bcount(ProcessInformationLength) PVOID ProcessInformation,
	__in ULONG ProcessInformationLength,
	__out_opt PULONG ReturnLength
	);
QUERY_INFO_PROCESS ZwQueryInformationProcess;

BOOLEAN bProtectSystemRegistry = FALSE;
BOOLEAN bRestrictUSBWrite;
BOOLEAN bRestrictUSBExecute;
BOOLEAN USB_TOTAL_BLOCK[26];
BOOLEAN USB_WRITE_BLOCK[26];
BOOLEAN USB_EXECUTE_BLOCK[26];

const static UNICODE_STRING BACKSLASH = RTL_CONSTANT_STRING(L"\\");

static UNICODE_STRING USB_DRIVE_LETTER = RTL_CONSTANT_STRING(L"*X:\\*");
static UNICODE_STRING USB_WRITE_REG_VALUE = RTL_CONSTANT_STRING(L"BLOCKUSBWRITE");
static UNICODE_STRING USB_EXECUTE_REG_VALUE = RTL_CONSTANT_STRING(L"BLOCKUSBEXECUTE");

static UNICODE_STRING AUTORUN_REG_VALUE = RTL_CONSTANT_STRING(L"BLOCKAUTORUN");
static UNICODE_STRING PROTECT_SYS_REG_VALUE = RTL_CONSTANT_STRING(L"ProtectSystemRegistry");


BOOLEAN ShouldWeBlock(PUNICODE_STRING pusRegistryPath, const PUNICODE_STRING pusValueName);

void ResetAllDrivesProtection();

BOOLEAN bRestrictAutorun = FALSE;
static UNICODE_STRING EXPLORER_FILE_NAME = RTL_CONSTANT_STRING(L"*\\EXPLORER.EXE");
static UNICODE_STRING SVCHOST_FILE_NAME = RTL_CONSTANT_STRING(L"*\\SYSTEM32\\SVCHOST.EXE");
static UNICODE_STRING SVCHOST_WOW_FILE_NAME = RTL_CONSTANT_STRING(L"*\\SYSWOW64\\SVCHOST.EXE");
static UNICODE_STRING AUTORUN_FILE_NAME = RTL_CONSTANT_STRING(L"*\\AUTORUN.INF");

const ULONG CALL_TYPE_UNKNOWN = 0;
const ULONG CALL_TYPE_F_EXECUTE = 1;
const ULONG CALL_TYPE_F_CREATE = 2;
const ULONG CALL_TYPE_F_OPEN = 3;
const ULONG CALL_TYPE_F_DELETE = 4;
const ULONG CALL_TYPE_F_RENAME = 5;
const ULONG CALL_TYPE_R_CREATE = 6;
const ULONG CALL_TYPE_R_OPEN = 7;
const ULONG CALL_TYPE_R_DELETE = 8;
const ULONG CALL_TYPE_R_RENAME = 9;
const ULONG CALL_TYPE_R_SETVAL = 10;
const ULONG CALL_TYPE_R_DELETEVAL = 11;
const ULONG CALL_TYPE_D_CREATE = 12;
const ULONG CALL_TYPE_F_NEW_FILE = 13;
const ULONG CALL_TYPE_F_NEW_SYS_FILE = 14;
const ULONG CALL_TYPE_F_REN_SYS_FILE = 15;
const ULONG CALL_TYPE_F_DEL_SYS_FILE = 16;
const ULONG CALL_TYPE_F_MOD_SYS_FILE = 17;
const ULONG CALL_TYPE_F_KIDO_FILE = 18;
const ULONG CALL_TYPE_F_REPLICATING = 19;
const ULONG CALL_TYPE_F_R_BLOCK = 20;
const ULONG CALL_TYPE_C_CREATE = 21;
const ULONG CALL_TYPE_U_CREATE = 22;
const ULONG CALL_TYPE_U_WRITE = 23;
const ULONG CALL_TYPE_U_EXECUTE = 24;
const ULONG CALL_TYPE_N_CREATE = 25;
const ULONG CALL_TYPE_FIM_DELETE = 26;
const ULONG CALL_TYPE_FIM_RENAME = 27;
const ULONG CALL_TYPE_FIM_MODIFY = 28;
const ULONG CALL_TYPE_FIM_CREATE = 29;


const UNICODE_STRING OurProcessesFiles[] =
{
	//RTL_CONSTANT_STRING(L"\\ULTRAAV\\"),
	
	RTL_CONSTANT_STRING(L"ULTRAAV\\*.EXE"),
	RTL_CONSTANT_STRING(L"SYSTEM32\\SERVICES.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUWATCHDOGSERVICE.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUACTMON.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUTRAY.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUSCANNER.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AULIVEUPDATE.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUSRVOPT.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUMAINUI.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUUSB.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUDBSERVER.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUMAILPROXY.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUFIREWALLSRV.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUWSRMSG.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUNOTIFICATIONS.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUUNINSTALLER.EXE"),

	RTL_CONSTANT_STRING(L"\\AUDRIVERMGR.EXE"),
	RTL_CONSTANT_STRING(L"\\NFREGDRV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAV.TMP"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVX64.TMP"),

	RTL_CONSTANT_STRING(L"\\ULPROX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULPROX64.TMP"),

	RTL_CONSTANT_STRING(L"\\ULPRO.EXE"),
	RTL_CONSTANT_STRING(L"\\ULPRO.TMP"),

	RTL_CONSTANT_STRING(L"\\ULVIR.EXE"),
	RTL_CONSTANT_STRING(L"\\ULVIR.TMP"),

	RTL_CONSTANT_STRING(L"\\ULVIRX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULVIRX64.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFDB.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFDB.TMP"),

	RTL_CONSTANT_STRING(L"\\UPD_*.EXE"),
	RTL_CONSTANT_STRING(L"\\UPD_*.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFWS.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFWS.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFWSX64.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFWSX64.TMP"),

	RTL_CONSTANT_STRING(L"\\AUUNINSTALLER.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRV.TMP"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRVX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRVX64.TMP"),

	/*----------------------------------------------------------------------------*/

	{0, 0, NULL}
};

const UNICODE_STRING InstallAllowProcess[] =
{
	//RTL_CONSTANT_STRING(L"\\ULTRAAV\\"),
	RTL_CONSTANT_STRING(L"\\MSIEXEC.EXE"),
	{0, 0, NULL}
};

const UNICODE_STRING OurProcesses2Protect[] =
{
	
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUWATCHDOGSERVICE.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUACTMON.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUTRAY.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUSCANNER.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AULIVEUPDATE.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUSRVOPT.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUUSB.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUDBSERVER.EXE"),
	RTL_CONSTANT_STRING(L"ULTRAAV\\AUFIREWALLSRV.EXE"),

	RTL_CONSTANT_STRING(L"\\AUDRIVERMGR.EXE"),
	RTL_CONSTANT_STRING(L"\\NFREGDRV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAV.TMP"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVX64.TMP"),

	RTL_CONSTANT_STRING(L"\\ULPROX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULPROX64.TMP"),

	RTL_CONSTANT_STRING(L"\\ULPRO.EXE"),
	RTL_CONSTANT_STRING(L"\\ULPRO.TMP"),

	RTL_CONSTANT_STRING(L"\\ULVIR.EXE"),
	RTL_CONSTANT_STRING(L"\\ULVIR.TMP"),

	RTL_CONSTANT_STRING(L"\\ULVIRX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULVIRX64.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFDB.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFDB.TMP"),

	RTL_CONSTANT_STRING(L"\\UPD_*.EXE"),
	RTL_CONSTANT_STRING(L"\\UPD_*.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFWS.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFWS.TMP"),

	RTL_CONSTANT_STRING(L"\\AUFWSX64.EXE"),
	RTL_CONSTANT_STRING(L"\\AUFWSX64.TMP"),

	RTL_CONSTANT_STRING(L"\\AUUNINSTALLER.EXE"),

	RTL_CONSTANT_STRING(L"\\ULTRAAVDRV.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRV.TMP"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRVX64.EXE"),
	RTL_CONSTANT_STRING(L"\\ULTRAAVDRVX64.TMP"),

	/***********************************************************************************/

	{0, 0, NULL}
};

const UNICODE_STRING FilesToProtect[] =
{
	// Requested by virus team to protect this folder and not allow exe to be created in this folder!
	RTL_CONSTANT_STRING(L"*\\DOCUMENTS AND SETTINGS\\*\\START MENU\\PROGRAMS\\STARTUP\\*.EXE"),

	RTL_CONSTANT_STRING(L"FILES\\ULTRAAV"),
	RTL_CONSTANT_STRING(L"*\\ULTRAAV\\*"),
	RTL_CONSTANT_STRING(L"*\\ULTRAAV\\DATA\\*"),

	RTL_CONSTANT_STRING(L"*\\SYSTEM32\\DRIVERS\\AUFSPROCDRV.SYS"),
	RTL_CONSTANT_STRING(L"*\\SYSTEM32\\DRIVERS\\AUACTMONDRV.SYS"),
	RTL_CONSTANT_STRING(L"*\\SYSTEM32\\DRIVERS\\AUFSMGRDRV.SYS"),
	RTL_CONSTANT_STRING(L"*\\SYSTEM32\\DRIVERS\\NETFILTER2.SYS"),
	RTL_CONSTANT_STRING(L"*\\SYSTEM32\\DRIVERS\\AUSECPPLELM.SYS"),

	/***********************************************************************/
	{0, 0, NULL}

};

const UNICODE_STRING RegistryToSkip[] =
{
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\TCPIP*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\NETBT*"),
	{0, 0, NULL}
};
const UNICODE_STRING RegistryToProtect[] =
{
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SOFTWARE\\ULTRAAV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SOFTWARE\\WOW6432NODE\\ULTRAAV*"),

	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SOFTWARE\\AUAPPFIREWALL*"),

	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUACTMONDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUFSMGRDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUFIREWALLSRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUFSPROCDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUWATCHDOGSERVICE*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\NETFILTER2*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CONTROLSET*\\SERVICES\\AUSECPPLELM*"),
	
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUACTMONDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUFSMGRDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUFIREWALLSRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUFSPROCDRV*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUWATCHDOGSERVICE*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\NETFILTER2*"),
	RTL_CONSTANT_STRING(L"\\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\AUSECPPLELM*"),

	/*************************************************************************/

	{0, 0, NULL}
};

const UNICODE_STRING SystemRegistryToProtect[] =
{
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\SHELL"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\WOW6432NODE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\SHELL"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\USERINIT"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\WOW6432NODE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\USERINIT"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\NOTIFY\\*"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\WOW6432NODE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\WINLOGON\\NOTIFY\\*"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\EXPLORER\\SHAREDTASKSCHEDULER\\*"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\WOW6432NODE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\EXPLORER\\SHAREDTASKSCHEDULER\\*"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\SHELLSERVICEOBJECTDELAYLOAD\\*"),
	RTL_CONSTANT_STRING(L"*\\SOFTWARE\\WOW6432NODE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\SHELLSERVICEOBJECTDELAYLOAD\\*"),
	{0, 0, NULL}
};

const UNICODE_STRING FilesToAllowInfection[] =
{
	//The following files will be protected & allowed all operations on the system!
	RTL_CONSTANT_STRING(L"*\\ULTRAAV\\FILEDATA\\*"),
	{0, 0, NULL}
};

const UNICODE_STRING ExeToAllow64[] =
{
	//Allow process list to create registry keys in WIN 64
	//RTL_CONSTANT_STRING(L"*\\WINDOWS\\REGEDIT.EXE"),
	//RTL_CONSTANT_STRING(L"*\\WINDOWS\\SYSTEM32\\SERVICES.EXE"),
	//RTL_CONSTANT_STRING(L"SYSTEM"),
	{0, 0, NULL}
};

const UNICODE_STRING OurPathFiles[] =
{
	RTL_CONSTANT_STRING(L"\\ULTRAAV\\"),
	{0, 0, NULL}
};


BOOLEAN MatchUnicodeString(UNICODE_STRING const* pusLeftString, UNICODE_STRING const* pusRightString);
BOOLEAN MatchWCHARString(int iwLen, PWCHAR w, int isLen, PWCHAR s);
USHORT	GetMaxLen(PUNICODE_STRING pStr);

BOOLEAN		GetImageNameByID(HANDLE ProcessId, PUNICODE_STRING pusImageFileName);
NTSTATUS	GetProcessImageName(HANDLE ProcessHandle, PUNICODE_STRING ProcessImageName);
BOOLEAN		IsOurPathFile(PUNICODE_STRING FileBeingAccessed);
BOOLEAN		IsOurProcessFile(PUNICODE_STRING ProcessPath);
BOOLEAN		IsOurProcess2Protect(PUNICODE_STRING ProcessPath);
BOOLEAN		IsProtectedFile(PUNICODE_STRING ParentFolderPath, PUNICODE_STRING FileBeingAccessed);
BOOLEAN		IsAutornINFCall(PUNICODE_STRING pParentProcPath, PUNICODE_STRING pFileBeingAccessed);
BOOLEAN		IsOurProcessByID(HANDLE dwProcessID);
BOOLEAN		GetProcessNameEx(PUNICODE_STRING ProcessImageName);
BOOLEAN		IsOurInstallationProcessFile(PUNICODE_STRING ProcessPath);

BOOLEAN		IsWriteCall(__inout PFLT_CALLBACK_DATA Data);


int		CheckIfProtectedRegistry(PUNICODE_STRING RegistryBeingAccessed);
BOOLEAN IsProtectedRegistry(PUNICODE_STRING ParentRegistryPath, PUNICODE_STRING RegistryPath);

POBJECT_NAME_INFORMATION GetObjectCompleteName(PVOID pObject);
BOOLEAN IsWOW64RegFile(PUNICODE_STRING FileBeingAccessed);

void SetTotalBlock(int iDriveLetter, BOOLEAN bBlock);
void SetWriteBlock(int iDriveLetter, BOOLEAN bBlock);
void SetExecuteBlock(int iDriveLetter, BOOLEAN bBlock);

BOOLEAN BlockUSBFileAccess(PUNICODE_STRING FileBeingAccessed, BOOLEAN bOpenForExecute, BOOLEAN bOpenForWrite);
BOOLEAN IsUSBProtectionOn();
//----------------------------------------------------------------------------------

NTSTATUS DriverEntry(IN PDRIVER_OBJECT driver, IN PUNICODE_STRING pusRegistryPath);

void DriverUnloadHandler(IN PDRIVER_OBJECT driver);
NTSTATUS DriverCreateCloseHandler(IN PDEVICE_OBJECT device, IN PIRP Irp);
NTSTATUS DriverCleanupHandler(IN PDEVICE_OBJECT device, IN PIRP Irp);
NTSTATUS DriverDeviceControlHandler(IN PDEVICE_OBJECT device, IN PIRP Irp);
void CleanUpDriver();
NTSTATUS MaxProtectorUnload(__in FLT_FILTER_UNLOAD_FLAGS Flags);

NTSTATUS MaxProtectorInstanceSetup(__in PCFLT_RELATED_OBJECTS FltObjects, __in FLT_INSTANCE_SETUP_FLAGS Flags,
	__in DEVICE_TYPE VolumeDeviceType, __in FLT_FILESYSTEM_TYPE VolumeFilesystemType);
NTSTATUS MaxProtectorQueryTeardown(__in PCFLT_RELATED_OBJECTS FltObjects, __in FLT_INSTANCE_QUERY_TEARDOWN_FLAGS Flags);

BOOLEAN RegisterProtectionFilterDriver(PDRIVER_OBJECT DriverObject);
NTSTATUS RegistryCallback(PVOID CallbackContext, PVOID Argument1, PVOID Argument2);

FLT_PREOP_CALLBACK_STATUS MaxProtectorPreCreate(__inout PFLT_CALLBACK_DATA Data, __in PCFLT_RELATED_OBJECTS FltObjects,
	__deref_out_opt PVOID* CompletionContext);

FLT_POSTOP_CALLBACK_STATUS MaxProtectorPostCreate(__inout PFLT_CALLBACK_DATA Data, __in PCFLT_RELATED_OBJECTS FltObjects,
	__in_opt PVOID CompletionContext, __in FLT_POST_OPERATION_FLAGS Flags);

BOOLEAN CheckFileEntry(__inout PFLT_CALLBACK_DATA Data, __in PCFLT_RELATED_OBJECTS FltObjects);

/**************************** PROC 64 ********************************/

#define PROCESS_TERMINATE			(0x0001)
#define PROCESS_SUSPEND_RESUME		(0x0800)
#define PROCESS_VM_OPERATION		(0x0008)
#define PROCESS_VM_WRITE			(0x0020)
#define PROCESS_CREATE_PROCESS		(0x0080)
#define PROCESS_DUP_HANDLE			(0x0040)
#define PROCESS_SET_INFORMATION		(0x0200)
#define PROCESS_QUERY_INFORMATION	(0x0400)

#define DELETE						(0x00010000L)
#define READ_CONTROL				(0x00020000L)
#define WRITE_DAC					(0x00040000L)
#define WRITE_OWNER					(0x00080000L)

BOOLEAN gbIsProcProtectionOn = FALSE;

typedef struct _OB_REG_CONTEXT
{
	__in USHORT Version;
	__in UNICODE_STRING Altitude;
	__in USHORT ulIndex;
} REG_CONTEXT, * PREG_CONTEXT;
VOID* g_hProcCreateHandle = NULL;

NTSTATUS RegisteCallbackFunction();
NTSTATUS UnRegisteCallbackFunction();
OB_PREOP_CALLBACK_STATUS MaxObjectPreCallback(__in PVOID RegistrationContext, __in POB_PRE_OPERATION_INFORMATION OperationInformation);
VOID MaxObjectPostCallback(__in PVOID  RegistrationContext, __in POB_POST_OPERATION_INFORMATION  OperationInformation);

int CheckHTTPSOperation(PUNICODE_STRING pEntryPath);
/**************************************************************************/

const static int IOCTL_PAUSE_PROTECTION = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8001, METHOD_NEITHER, FILE_ANY_ACCESS);
const static int IOCTL_RESUME_PROTECTION = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8005, METHOD_IN_DIRECT, FILE_ANY_ACCESS);
const static int IOCTL_BLOCK_USB_DRIVE = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8002, METHOD_BUFFERED, FILE_ANY_ACCESS);
const static int IOCTL_UNBLOCK_USB_DRIVE = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8003, METHOD_BUFFERED, FILE_ANY_ACCESS);
const static int IOCTL_DISCONNECT_USB_DRIVE = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8004, METHOD_BUFFERED, FILE_ANY_ACCESS);
const static int IOCTL_REGISTER_PROCESSID = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8006, METHOD_BUFFERED, FILE_ANY_ACCESS);
const static int IOCTL_INSTALL_PROTECTION = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8055, METHOD_NEITHER, FILE_ANY_ACCESS);
const static int IOCTL_STOP_INSTALL_PROTECTION = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8056, METHOD_NEITHER, FILE_ANY_ACCESS);

enum Max_Protected_Processes
{
	MAX_PROC_MAXSDUI,
	MAX_PROC_MAXSDTRAY,
	MAX_PROC_MAXUSB,
	MAX_PROC_MAXWATCHDOG,
	MAX_PROC_MAXSCANNER_OPTION,
	MAX_PROC_MAXSCANNER_USB,
	MAX_PROC_MAXSCANNER_MAIN,
	MAX_PROC_MAXSCANNER_HE,
	MAX_PROC_KEYLOGGERSCANNER,
	MAX_PROC_MAXCMDSCANNER,
	MAX_PROC_MAXDSRV,
	MAX_PROC_MAXPROTECTOR,
	MAX_PROC_MAXMERGER,
	MAX_PROC_MAXAVSETUP,
	MAX_PROC_SETUP,
	MAX_PROC_IEXPLORER,
	MAX_PROC_LIVEUPDATE,
	MAX_PROC_NOTIFICATION,
	MAX_PROC_MIGRATESD,
	MAX_PROC_MAXACTMON,
	MAX_PROC_MAXUSBPROC,
	MAX_PROC_MAXPROCSCN,
	MAX_PROC_MAXREGISTRYBACKUP,
	MAX_PROC_MAXROOTKITSCANNERUI,
	MAX_PROC_MAXUNINSTALLER,
	MAX_PROC_SENDREPORT,
	MAX_PROC_SUBMITSAMPLES,
	MAX_PROC_SDFRAUDTOOLFIX,
	MAX_PROC_MAXROOTKITSCANNER,
	MAX_PROC_MAXFSMON,
	MAX_PROC_MAXWSMON,
	MAX_PROC_MAXWSRMON,

	//Tools
	MAX_PROC_BACKUPRESTOREUTILITY,
	MAX_PROC_CMDREGISTRATION,
	MAX_PROC_MAXCLEANSYSVOLUME,
	MAX_PROC_MAXGENPROCHOST,
	MAX_PROC_MAXKIDOFIX,
	MAX_PROC_MAXREGISTRYFIX,
	MAX_PROC_MAXSALCLN,
	MAX_PROC_MAXSERVICESLIST,
	MAX_PROC_MAXTRJSCN,
	MAX_PROC_MAXUNHIDE,
	MAX_PROC_MAXUPDATEFIX,
	MAX_PROC_SETDACL,
	MAX_PROC_MAXSECUREREPORTS,

	//Firewall
	MAX_PROC_DRIVER_MGR,
	MAX_PROC_INTERSECINTERFACEXP,
	MAX_PROC_INTERSECSRVXP,
	MAX_PROC_MAILPROXY,
	MAX_PROC_FIREWALLSERVICE,

	//MTS
	MAX_PROC_MTS_UI,
	MAX_PROC_MTS_SCH,
	MAX_PROC_MTS_GADGET,

	//Outlook
	MAX_PROC_OUTLOOK,					// Do not add this in Process protection

	MAX_PROC_MAXPWDMGR,

	MAX_PROC_CLOUAVUI,
	MAX_PROC_MAXOPTCL,
	MAX_PROC_MAXWMGRSRV,
	MAX_PROC_MAXSECURECMD,

	MAX_PROC_LAPTOPTRACKER,
	MAX_PROC_MAXFIM,
	MAX_PROC_MAXRESERVE3,
	MAX_PROC_MAXRESERVE4,

	MAX_PROC_MAX_PROC_LAST_ENTRY		// Always add new application above this entry
};

DWORD dwProcessIDList[MAX_PROC_MAX_PROC_LAST_ENTRY] = { 0 };